openapi: 3.0.0
info:
  title: API de Gestion Scolaire
  version: 1.0.0
  description: API pour gérer les cours, étudiants et instructeurs d'une école

servers:
  - url: http://localhost:5000/api
    description: Serveur de développement

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        userType:
          type: string
          enum: [administrator, student, instructor]
        createdAt:
          type: string
          format: date-time

    Course:
      type: object
      properties:
        name:
          type: string
          example: "Mathématiques avancées"
        duration:
          type: string
          example: "3 mois"
        teachingDays:
          type: array
          items:
            type: string
            enum: [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday]
        instructors:
          type: array
          items:
            $ref: '#/components/schemas/Instructor'

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string

paths:
  /auth/register:
    post:
      tags:
        - Authentification
      summary: Inscription d'un nouvel utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - userType
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                userType:
                  type: string
                  enum: [administrator, student, instructor]
      responses:
        201:
          description: Utilisateur créé avec succès
        400:
          description: Données invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags:
        - Authentification
      summary: Connexion utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        200:
          description: Connexion réussie
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'

  /courses:
    get:
      tags:
        - Cours
      summary: Récupérer tous les cours
      security:
        - BearerAuth: []
      responses:
        200:
          description: Liste des cours
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Course'

    post:
      tags:
        - Cours
      summary: Créer un nouveau cours
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - duration
                - teachingDays
              properties:
                name:
                  type: string
                duration:
                  type: string
                teachingDays:
                  type: array
                  items:
                    type: string
                instructors:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        201:
          description: Cours créé avec succès
        400:
          description: Données invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /students:
    get:
      tags:
        - Étudiants
      summary: Récupérer tous les étudiants
      security:
        - BearerAuth: []
      responses:
        200:
          description: Liste des étudiants

    post:
      tags:
        - Étudiants
      summary: Créer un nouvel étudiant
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                courses:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        201:
          description: Étudiant créé avec succès

  /instructors:
    get:
      tags:
        - Instructeurs
      summary: Récupérer tous les instructeurs
      security:
        - BearerAuth: []
      responses:
        200:
          description: Liste des instructeurs

    post:
      tags:
        - Instructeurs
      summary: Créer un nouvel instructeur
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                courses:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        201:
          description: Instructeur créé avec succès 